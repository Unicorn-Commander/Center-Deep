"""
Blog Management Models
Database models for blog posts, categories, and blog configuration
"""

from app import db
from datetime import datetime, timezone
from sqlalchemy import JSON, Text
import uuid
import slugify

class BlogSettings(db.Model):
    """Global blog configuration"""
    __tablename__ = 'blog_settings'
    
    id = db.Column(db.Integer, primary_key=True)
    blog_enabled = db.Column(db.Boolean, default=True)
    blog_title = db.Column(db.String(200), default="Center Deep Blog")
    blog_subtitle = db.Column(db.String(500), default="Insights on Search, AI, and Technology")
    blog_description = db.Column(db.Text)
    
    # Landing page content
    hero_content = db.Column(db.Text)
    about_section = db.Column(db.Text)
    featured_post_ids = db.Column(JSON)  # List of post IDs to feature
    
    # SEO and metadata
    meta_description = db.Column(db.String(500))
    meta_keywords = db.Column(db.String(500))
    
    # Display settings
    posts_per_page = db.Column(db.Integer, default=10)
    show_author = db.Column(db.Boolean, default=True)
    show_date = db.Column(db.Boolean, default=True)
    show_tags = db.Column(db.Boolean, default=True)
    show_categories = db.Column(db.Boolean, default=True)
    
    # Social sharing
    enable_social_sharing = db.Column(db.Boolean, default=True)
    social_image_url = db.Column(db.String(1000))
    
    updated_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)

class BlogCategory(db.Model):
    """Blog post categories"""
    __tablename__ = 'blog_categories'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    slug = db.Column(db.String(100), nullable=False, unique=True)
    description = db.Column(db.Text)
    color = db.Column(db.String(7), default='#3B82F6')  # Hex color code
    
    # Display settings
    enabled = db.Column(db.Boolean, default=True)
    sort_order = db.Column(db.Integer, default=0)
    
    # Agent assignments
    assigned_agents = db.Column(JSON)  # List of agent IDs that can post to this category
    
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    posts = db.relationship('BlogPost', backref='category', lazy=True)
    
    def save(self):
        if not self.slug:
            self.slug = slugify.slugify(self.name)
        db.session.add(self)
        db.session.commit()

class BlogPost(db.Model):
    """Blog posts with full content management"""
    __tablename__ = 'blog_posts'
    
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(500), nullable=False)
    slug = db.Column(db.String(500), nullable=False, unique=True)
    excerpt = db.Column(db.Text)  # Short description/summary
    content = db.Column(db.Text, nullable=False)
    content_format = db.Column(db.String(20), default='markdown')  # markdown, html
    
    # Relationships
    category_id = db.Column(db.Integer, db.ForeignKey('blog_categories.id'))
    author_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    agent_id = db.Column(db.Integer)  # Reference to content agent (if generated by agent)
    
    # Status and publishing
    status = db.Column(db.String(20), default='draft')  # draft, pending, published, archived
    visibility = db.Column(db.String(20), default='public')  # public, private, password_protected
    password = db.Column(db.String(100))  # For password-protected posts
    
    # Scheduling
    published_at = db.Column(db.DateTime(timezone=True))
    scheduled_for = db.Column(db.DateTime(timezone=True))
    
    # SEO and metadata
    meta_title = db.Column(db.String(200))
    meta_description = db.Column(db.String(500))
    meta_keywords = db.Column(db.String(500))
    featured_image_url = db.Column(db.String(1000))
    
    # Content metadata
    tags = db.Column(JSON)  # List of tag strings
    word_count = db.Column(db.Integer, default=0)
    reading_time = db.Column(db.Integer, default=0)  # Minutes
    post_metadata = db.Column(JSON)  # Additional metadata
    
    # Analytics and engagement
    view_count = db.Column(db.Integer, default=0)
    like_count = db.Column(db.Integer, default=0)
    share_count = db.Column(db.Integer, default=0)
    
    # Agent generation metadata
    source_data_ids = db.Column(JSON)  # IDs of scraped data used
    generation_prompt = db.Column(db.Text)  # Prompt used for generation
    ai_confidence = db.Column(db.Float)  # AI confidence score
    
    # Workflow
    approval_notes = db.Column(db.Text)
    approved_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    approved_at = db.Column(db.DateTime(timezone=True))
    
    # Timestamps
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    author = db.relationship('User', foreign_keys=[author_id], backref='blog_posts')
    approver = db.relationship('User', foreign_keys=[approved_by], backref='approved_posts')
    comments = db.relationship('BlogComment', backref='post', lazy=True, cascade='all, delete-orphan')
    
    def save(self):
        if not self.slug:
            self.slug = slugify.slugify(self.title)
        
        # Calculate reading time (average 200 words per minute)
        if self.content:
            self.word_count = len(self.content.split())
            self.reading_time = max(1, self.word_count // 200)
        
        # Auto-generate excerpt if not provided
        if not self.excerpt and self.content:
            # Extract first paragraph or 150 characters
            content_text = self.content.replace('#', '').replace('*', '')
            self.excerpt = content_text[:150] + '...' if len(content_text) > 150 else content_text
        
        db.session.add(self)
        db.session.commit()
    
    @property
    def is_published(self):
        return (self.status == 'published' and 
                self.published_at and 
                self.published_at <= datetime.now(timezone.utc))
    
    @property
    def url(self):
        return f"/blog/{self.slug}"

class BlogComment(db.Model):
    """Comments on blog posts"""
    __tablename__ = 'blog_comments'
    
    id = db.Column(db.Integer, primary_key=True)
    post_id = db.Column(db.Integer, db.ForeignKey('blog_posts.id'), nullable=False)
    
    # Comment content
    author_name = db.Column(db.String(100), nullable=False)
    author_email = db.Column(db.String(200))
    content = db.Column(db.Text, nullable=False)
    
    # Moderation
    status = db.Column(db.String(20), default='pending')  # pending, approved, spam, deleted
    ip_address = db.Column(db.String(45))
    user_agent = db.Column(db.String(500))
    
    # Threading (for replies)
    parent_id = db.Column(db.Integer, db.ForeignKey('blog_comments.id'))
    
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    replies = db.relationship('BlogComment', backref=db.backref('parent', remote_side=[id]))

class AgentTrigger(db.Model):
    """Intelligent triggers for autonomous agent posting"""
    __tablename__ = 'agent_triggers'
    
    id = db.Column(db.Integer, primary_key=True)
    agent_id = db.Column(db.Integer, nullable=False)  # Reference to content agent
    name = db.Column(db.String(200), nullable=False)
    description = db.Column(db.Text)
    
    # Trigger conditions
    trigger_type = db.Column(db.String(50), nullable=False)  # volume, keyword, sentiment, time
    conditions = db.Column(JSON, nullable=False)  # Specific conditions
    
    # Examples:
    # volume: {"min_items": 5, "time_window": "24h", "sources": ["reddit", "github"]}
    # keyword: {"keywords": ["major release", "breakthrough"], "weight": 0.8}
    # sentiment: {"min_score": 0.7, "sources": ["twitter", "reddit"]}
    # time: {"after": "3d", "min_related_items": 3}
    
    # Actions
    category_id = db.Column(db.Integer, db.ForeignKey('blog_categories.id'))
    priority = db.Column(db.String(20), default='normal')  # high, normal, low
    auto_approve = db.Column(db.Boolean, default=False)
    
    # Status
    enabled = db.Column(db.Boolean, default=True)
    last_triggered = db.Column(db.DateTime(timezone=True))
    trigger_count = db.Column(db.Integer, default=0)
    
    # Cooldown (prevent spam)
    cooldown_hours = db.Column(db.Integer, default=24)
    
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    category = db.relationship('BlogCategory', backref='triggers')

class BlogAnalytics(db.Model):
    """Blog analytics and metrics"""
    __tablename__ = 'blog_analytics'
    
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)
    
    # Page views
    total_views = db.Column(db.Integer, default=0)
    unique_visitors = db.Column(db.Integer, default=0)
    
    # Popular content
    top_posts = db.Column(JSON)  # List of {post_id, views, title}
    top_categories = db.Column(JSON)
    top_tags = db.Column(JSON)
    
    # Traffic sources
    referrer_data = db.Column(JSON)  # {source: count}
    search_terms = db.Column(JSON)  # {term: count}
    
    # Engagement
    total_comments = db.Column(db.Integer, default=0)
    total_shares = db.Column(db.Integer, default=0)
    avg_time_on_page = db.Column(db.Float, default=0.0)  # seconds
    
    # Agent performance
    agent_posts_published = db.Column(JSON)  # {agent_id: count}
    agent_approval_rate = db.Column(JSON)  # {agent_id: rate}
    
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)