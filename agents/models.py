"""
Agent Management Models
Database models for scrapers, agents, and content management
"""

from app import db
from datetime import datetime, timezone
from sqlalchemy import JSON
import uuid

class DataScraper(db.Model):
    """Configuration for data scrapers"""
    __tablename__ = 'data_scrapers'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    scraper_type = db.Column(db.String(50), nullable=False)  # rss, github, reddit, custom_url
    config = db.Column(JSON, nullable=False)  # URLs, selectors, etc.
    schedule = db.Column(db.String(50), default='daily')  # hourly, daily, weekly
    enabled = db.Column(db.Boolean, default=True)
    last_run = db.Column(db.DateTime(timezone=True))
    next_run = db.Column(db.DateTime(timezone=True))
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    
    # Relationships
    scraped_data = db.relationship('ScrapedData', backref='scraper', lazy=True, cascade='all, delete-orphan')

class ScrapedData(db.Model):
    """Stores data collected by scrapers"""
    __tablename__ = 'scraped_data'
    
    id = db.Column(db.Integer, primary_key=True)
    scraper_id = db.Column(db.Integer, db.ForeignKey('data_scrapers.id'), nullable=False)
    title = db.Column(db.String(500))
    content = db.Column(db.Text)
    url = db.Column(db.String(1000))
    metadata = db.Column(JSON)  # author, tags, publish_date, etc.
    scraped_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    processed = db.Column(db.Boolean, default=False)
    
class ContentAgent(db.Model):
    """Configuration for content generation agents"""
    __tablename__ = 'content_agents'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    agent_type = db.Column(db.String(50), nullable=False)  # blog_writer, social_media, newsletter
    description = db.Column(db.Text)
    
    # LLM Configuration
    llm_provider_id = db.Column(db.Integer, db.ForeignKey('llm_providers.id'))
    temperature = db.Column(db.Float, default=0.7)
    max_tokens = db.Column(db.Integer, default=4000)
    system_prompt = db.Column(db.Text)
    
    # Content Configuration
    data_sources = db.Column(JSON)  # List of scraper IDs to use as input
    content_template = db.Column(db.Text)  # Template for generated content
    schedule = db.Column(db.String(50), default='daily')
    auto_approve = db.Column(db.Boolean, default=False)  # Skip approval workflow
    
    enabled = db.Column(db.Boolean, default=True)
    last_run = db.Column(db.DateTime(timezone=True))
    next_run = db.Column(db.DateTime(timezone=True))
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    
    # Relationships
    generated_content = db.relationship('GeneratedContent', backref='agent', lazy=True, cascade='all, delete-orphan')
    llm_provider = db.relationship('LLMProvider', backref='content_agents')

class GeneratedContent(db.Model):
    """Stores content generated by agents"""
    __tablename__ = 'generated_content'
    
    id = db.Column(db.Integer, primary_key=True)
    agent_id = db.Column(db.Integer, db.ForeignKey('content_agents.id'), nullable=False)
    
    title = db.Column(db.String(500), nullable=False)
    content = db.Column(db.Text, nullable=False)
    content_type = db.Column(db.String(50), nullable=False)  # blog_post, social_post, newsletter
    
    # Status workflow
    status = db.Column(db.String(20), default='pending')  # pending, approved, rejected, published
    
    # Metadata
    metadata = db.Column(JSON)  # tags, categories, social_platforms, etc.
    source_data_ids = db.Column(JSON)  # List of ScrapedData IDs used to generate this
    
    # Timestamps
    generated_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    approved_at = db.Column(db.DateTime(timezone=True))
    published_at = db.Column(db.DateTime(timezone=True))
    scheduled_for = db.Column(db.DateTime(timezone=True))
    
    # Admin actions
    approved_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    admin_notes = db.Column(db.Text)
    
    # Relationships
    approver = db.relationship('User', backref='approved_content')

class AgentSchedule(db.Model):
    """Manages scheduling for scrapers and agents"""
    __tablename__ = 'agent_schedules'
    
    id = db.Column(db.Integer, primary_key=True)
    schedule_id = db.Column(db.String(100), unique=True, nullable=False)  # UUID for job identification
    entity_type = db.Column(db.String(20), nullable=False)  # 'scraper' or 'agent'
    entity_id = db.Column(db.Integer, nullable=False)
    
    schedule_config = db.Column(JSON, nullable=False)  # cron expression, timezone, etc.
    next_run = db.Column(db.DateTime(timezone=True), nullable=False)
    
    enabled = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow)
    updated_at = db.Column(db.DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow)